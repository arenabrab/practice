plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.3'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.netflix.dgs.codegen' version '8.1.1'
	id 'org.graalvm.buildtools.native' version '0.10.6'
}

group = 'com.barbanera'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(24)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
//	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'
	implementation 'org.springframework.kafka:spring-kafka'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.postgresql:r2dbc-postgresql'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'


	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:kafka'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.testcontainers:r2dbc'
}

generateJava {
	schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
	packageName = 'com.barbanera.metrics.codegen'
	generateClient = true
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named("bootBuildImage") {
//	imageName = 'ghcr.io/arenabrab/practice:metrics-0.0.1-SNAPSHOT'
//	publish = true

    builder = "paketobuildpacks/builder-jammy-tiny:latest"

    environment = [
            "BPL_JVM_THREAD_COUNT": "50",
            "BP_JVM_VERSION": "24",
            "BPL_SPRING_CLOUD_BINDINGS_DISABLED": "true",
            "BP_NATIVE_IMAGE_BUILD_ARGUMENTS": "-Ob"
    ]

    buildArgs = [
            "BP_JVM_JLINK_ENABLED": "true"
    ]

//	docker {
//		publishRegistry {
//			username = System.getenv('CI_REGISTRY_USER')
//			password = System.getenv('LOCAL_DEV_TOKEN')
//		}
//	}
}